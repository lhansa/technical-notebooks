{
  "hash": "d03d4c361512c6718ca57570bfa84d2e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Concatenación de strings con R, con benchmark\"\ndescription: \"Comparativa con microbenchmark de distintas formas de concatenar strings con R\"\ndescription-meta: \"Comparativa con microbenchmark de distintas formas de concatenar strings con R\"\nauthor: \"Leonardo Hansa\"\ndate: \"2024-07-30\"\ncategories: [datos]\nexecute: \n  echo: true\n  message: false\n  warning: false\nfreeze: true\n---\n\n\n\n\nTienes una variable con un texto que tienes que introducirlo dentro de otro texto. Este ocurre habitualmente cuando un usuario pone algún parámetro de tipo texto y tienes que incluir en un párrafo preconstruido, o interactuar de alguna forma con ese nombre, por ejemmplo, un chatbot clásico que recibía como entrada el nombre del usuario y luego le preguntaba \"¿Qué tal estás, <nombre de usuario>?\" (no sé si eso es tan clásico o sigue siendo orden del día).\n\nEn este post comparo tiempos de ejecución de varias opciones que tienes en R. \n\nLa idea general te la da este código:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnombre_entrada <- \"Pepito\"\n\npaste(\"Hola,\", nombre_entrada)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hola, Pepito\"\n```\n\n\n:::\n:::\n\n\n\nVoy a crear varias funciones con distintas formas de hacer esto y luego cuento tiempos de cómputo.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncon_paste <- function(nombre_entrada) paste(\"Hola,\", nombre_entrada)\ncon_sprintf <- function(nombre_entrada) sprintf(\"Hola, %s\", nombre_entrada)\ncon_glue <- function(nombre_entrada) glue::glue(\"Hola, {nombre_entrada}\")\ncon_gsub <- function(nombre_entrada) {\n  gsub(\"nombre_entrada\", nombre_entrada, \"Hola, nombre_entrada\") \n}\n```\n:::\n\n\n\n\nY aquí los tiempos.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmicrobenchmark::microbenchmark(\n  con_paste = con_paste(\"Pepito\"),\n  con_sprintf = con_sprintf(\"Pepito\"),\n  con_glue = con_glue(\"Pepito\"),\n  con_gsub = con_gsub(\"Pepito\")\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: nanoseconds\n        expr    min       lq      mean   median       uq      max neval\n   con_paste   2202   2650.5  12954.99   3401.0   4201.0   850801   100\n con_sprintf    901   1250.5  11382.94   2101.0   3151.0   790101   100\n    con_glue 135902 143701.0 591651.04 154401.0 180501.5 41454102   100\n    con_gsub  10301  12150.0  30976.88  14801.5  18202.0  1449701   100\n```\n\n\n:::\n:::\n\n\n\n\nEn casos más complicados, `glue::glue()` puede parecer más intuitivo. ¿Es ese el único motivo para usarlo?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncon_paste <- function(nombre_entrada) {\n  paste0(\"Hola, \", nombre_entrada, \". ¿Cómo estás, \", nombre_entrada, \"?\")\n} \ncon_sprintf <- function(nombre_entrada) {\n  sprintf(\"Hola, %s. ¿Cómo estás, %s?\", nombre_entrada, nombre_entrada)\n  \n} \ncon_glue <- function(nombre_entrada) {\n  glue::glue(\"Hola, {nombre_entrada}. ¿Cómo estás, {nombre_entrada}?\")\n  \n}\ncon_gsub <- function(nombre_entrada) {\n  gsub(\"nombre_entrada\", nombre_entrada, \"Hola, nombre_entrada. ¿Cómo estás, nombre_entrada?\") \n}\n\nmicrobenchmark::microbenchmark(\n  con_paste = con_paste(\"Pepito\"),\n  con_sprintf = con_sprintf(\"Pepito\"),\n  con_glue = con_glue(\"Pepito\"),\n  con_gsub = con_gsub(\"Pepito\")\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n        expr     min       lq      mean   median       uq      max neval\n   con_paste   2.701   3.2010  14.34601   4.0010   4.4005 1040.201   100\n con_sprintf   1.200   1.7015  15.13189   2.6515   3.2010 1225.901   100\n    con_glue 149.201 157.8510 182.23310 162.9015 168.9510 1041.801   100\n    con_gsub  13.601  15.5005  33.93807  18.0510  19.5515 1564.500   100\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}