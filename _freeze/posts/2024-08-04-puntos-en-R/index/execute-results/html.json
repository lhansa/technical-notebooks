{
  "hash": "63464741442ca73f88edeeede95c0eb6",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Papel del punto en R\"\ndescription: \"\"\ndescription-meta: \"\"\nauthor: \"Leonardo Hansa\"\ndate: \"2024-08-04\"\ncategories: [datos]\nexecute: \n  echo: true\n  message: false\n  warning: false\nfreeze: true\n---\n\n\n\n\nGuillermo Luijk [criticaba](https://www.linkedin.com/feed/update/urn:li:activity:7225379882355044352?commentUrn=urn%3Ali%3Acomment%3A%28activity%3A7225379882355044352%2C7225391436190371840%29&replyUrn=urn%3Ali%3Acomment%3A%28activity%3A7225379882355044352%2C7225459855812120576%29&dashCommentUrn=urn%3Ali%3Afsd_comment%3A%287225391436190371840%2Curn%3Ali%3Aactivity%3A7225379882355044352%29&dashReplyUrn=urn%3Ali%3Afsd_comment%3A%287225459855812120576%2Curn%3Ali%3Aactivity%3A7225379882355044352%29) el punto en R porque se permite usar en el nombre de variables, lo que limita su uso fuera de ellas.\n\n\nHe intentado crear un operador en R con `.` que sirviera para sustituir en cierto modo al operador `$`. Imposible. \n\nPero comparto avances porque quizá, aunque sea al Leo del futuro, le puede venir bien.\n\n## Operadores _infix_ propios en R\n\nTodo lo que haces en R es una función. Pero no todas las funciones necesitan paréntesis. Por ejemplo, puedes sumar de dos formas:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n\n```{.r .cell-code}\n`+`(1, 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2\n```\n\n\n:::\n:::\n\n\n\n\nLa primera opción creo que se llama _infix_. Hay operaciones que se entienden mucho mejor así escritas que escritas como la segunda opción. \n\nDe hecho, esa es la filosofía del _pipe_. El _pipe_ está disponible desde R 4.1.0 con `|>` pero antiguamente había que usar la librería **magrittr**. \n\nComo esta librería no formaba parte de lo fundamentos del lenguaje, todos los operadores tenían que ser propios y para hacer eso hay que usar una sintaxis muy particular. \n\nLos pipes de magrittr van acotados por `%`, porque esa es la sintaxis obligatoria para cualquier operador que quieras hacer y usar _infix_. Así resultó en `%>%`. \n\n## Creación de un operador propio\n\nMi objetivo era un operador `.` con el que pudiera hacer `df.columna`, por ejemplo, que `mtcars.cyl` obtuviera resultado. Sería algo así:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars.cyl\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 6 6 4 6 8 6 8 4 4 6 6 8 8 8 8 8 8 4 4 4 4 8 8 8 8 4 4 4 8 6 8 4\n```\n\n\n:::\n:::\n\n\n\n\nSi intentas ejecutar eso, te dará error. Y no he dado con ninguna forma de hacerlo funcionar. Porque cualquier operador propio tiene que ir rodeado de `%`. \n\nPor ello, esto es lo que he conseguido:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n`%.%` <- function(df, columna) {\n    df[[as.character(substitute(columna))]]\n}\n\nmtcars%.%cyl\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] 6 6 4 6 8 6 8 4 4 6 6 8 8 8 8 8 8 4 4 4 4 8 8 8 8 4 4 4 8 6 8 4\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}