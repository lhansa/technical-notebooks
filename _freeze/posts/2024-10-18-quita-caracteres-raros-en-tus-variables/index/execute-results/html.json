{
  "hash": "6f0092f69adee8ab75c46eb6ac3b342a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Quita caracteres raros en tus variables\"\ndescription: \"Pequeña práctica para limpiar los textos de las variables de tus tablas\"\ndescription-meta: \"Pequeña práctica para limpiar los textos de las variables de tus tablas\"\nauthor: \"Leonardo Hansa\"\ndate: \"2024-10-18\"\ncategories: [exploraciones]\nexecute: \n  echo: true\n  message: false\n  warning: false\nfreeze: true\n---\n\n\n\nLa programación está pensada con el alfabeto anglosajón. Cuando tienes datos en español, francés, turco, etc., aunque el alfabeto tiene casi todo en común con el anglosajón, tiene demasiados elementos molestos en algunos casos. \n\nSin ir más lejos, estas líneas están llenas de tildes (y alguna eñe caerá). En las filas de una columna pueden no molestarte  (dependerá del análisis que vayas hacer), pero si tienes que pasar esos valores a nombres de columnas, puede ser muy mala idea que tengas alguna llamada `año`.\n\nVeamos formas de solucionarlo.\n\n## A mano\n\nForma horrible.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnombres <- c(\"Campaña veintitrés\", \"C'est très petite\", \"Alışveriş Arabası Önü Giydirme\")\nnombres <- rep(nombres, 2)\nnombres\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Campaña veintitrés\"             \"C'est très petite\"             \n[3] \"Alışveriş Arabası Önü Giydirme\" \"Campaña veintitrés\"            \n[5] \"C'est très petite\"              \"Alışveriş Arabası Önü Giydirme\"\n```\n\n\n:::\n:::\n\n\n\nTienes una columna con esos valores. Tienen textos en español, francés y turco. Y repetidos. Quieres adaptarlo a alfabeto anglosajón. Por ejemplo, `\"campaña\"` pasará a ser `\"campana\"` (habrá niños en el cuerpo de un adulto que se pondrían nerviosos si estuviera la palabra `\"año\"` por allí).\n\nPuedes plantear algún `replace`, pero como intentes hacerlo carácter a carácter, vas a querer dejar tu trabajo.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstringr::str_replace(nombres, \"ñ\", \"n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Campana veintitrés\"             \"C'est très petite\"             \n[3] \"Alışveriş Arabası Önü Giydirme\" \"Campana veintitrés\"            \n[5] \"C'est très petite\"              \"Alışveriş Arabası Önü Giydirme\"\n```\n\n\n:::\n:::\n\n\n\nEso puede serte útil si tienes algún maestro que te dijera como cambiar carácter. Pero no tiene sentido que tengas que hacerlo letra a letra (aunque es muy posible que la mejor forma de construir ese maestro es hacerlo letra a letra la primera vez).\n\n## _Conversiones_\n\nNo sé cómo llamar a esto, pero hay un par de funciones que pueden ayudarte... en cierto modo. \n\nMatizo: te pueden quitar los caracteres raros, pero no va a ser suficiente para que los textos te sirvan como nombres de columnas. \n\nTen en cuenta que los nombres de columnas deberían ser en minúsculas y con barras bajas (o quizá con mayúscula la primera letra de cada palabra, si barras), no solo sin tildes ni caracteres raros.\n\nPero vamos a ver cómo queda. \n\nEn R base tienes la función `iconv()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\niconv(nombres, to = \"ASCII//TRANSLIT\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Campana veintitres\"             \"C'est tres petite\"             \n[3] \"Alisveris Arabasi Onu Giydirme\" \"Campana veintitres\"            \n[5] \"C'est tres petite\"              \"Alisveris Arabasi Onu Giydirme\"\n```\n\n\n:::\n:::\n\n\n\nNo está mal, que me ha incluso simplificado las íes turcas. Pero esto sigue sin valerme a mí.\n\nSi te vale a ti, una alternativa es:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstringi::stri_trans_general(nombres, \"latin-ascii\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Campana veintitres\"             \"C'est tres petite\"             \n[3] \"Alisveris Arabasi Onu Giydirme\" \"Campana veintitres\"            \n[5] \"C'est tres petite\"              \"Alisveris Arabasi Onu Giydirme\"\n```\n\n\n:::\n:::\n\n\n\nPero:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmicrobenchmark::microbenchmark(\n    base = iconv(nombres, to = \"ASCII//TRANSLIT\"), \n    stringi = stringi::stri_trans_general(nombres, \"latin-ascii\")\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nUnit: microseconds\n    expr   min     lq    mean median     uq    max neval\n    base  48.8  92.40  93.886   97.7 107.70  138.3   100\n stringi 340.3 422.45 708.301  868.9 880.25 1161.3   100\n```\n\n\n:::\n:::\n\n\n\n## Mi solución\n\nInsisto que lo que quiero no es solo unificar caracteres, cosa que podría ser útil en algún proyecto de procesamiento de lenguaje natural, sino convertir esos textos a algo útil como nombres de columnas de una tabla (con sus minúsculas, sus barras bajas en lugar de espacios, etc).\n\nPara esto me gusta la librería **janitor**. La función con la que la conocí es `clean_names()`.\n\nRecuerda que los nombres de columnas del data frame `iris` son Sepal.Length, Sepal.Width, Petal.Length, Petal.Width, Species. Pero:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(janitor)\niris |> \n  clean_names() |> \n  names()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sepal_length\" \"sepal_width\"  \"petal_length\" \"petal_width\"  \"species\"     \n```\n\n\n:::\n:::\n\n\n\nEsta librería tiene la función `make_clean_names()`, que actúa sobre vectores.\n\nPero ten en cuenta una cosa: que su utilidad principal es para nombres de columnas, y **en una tabla nunca debería haber dos columnas con el mismo nombre**, así que evita duplicados:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_clean_names(nombres)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"campana_veintitres\"               \"cest_tres_petite\"                \n[3] \"alisveris_arabasi_onu_giydirme\"   \"campana_veintitres_2\"            \n[5] \"cest_tres_petite_2\"               \"alisveris_arabasi_onu_giydirme_2\"\n```\n\n\n:::\n:::\n\n\n\nTú puedes no querer eso. Pero hay un argumento que te soluciona el problema:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_clean_names(nombres, allow_dupes = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"campana_veintitres\"             \"cest_tres_petite\"              \n[3] \"alisveris_arabasi_onu_giydirme\" \"campana_veintitres\"            \n[5] \"cest_tres_petite\"               \"alisveris_arabasi_onu_giydirme\"\n```\n\n\n:::\n:::\n\n\n\n## Python\n\nEn algún momento, haré esto en Python.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}