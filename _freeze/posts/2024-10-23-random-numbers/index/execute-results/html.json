{
  "hash": "bad7519103a6f81f90ee38153f43c45d",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Juego probabilístico con números aleatorios\"\ndescription: \"Práctica de pensamiento probabilístico con ejemplos de generación de números aleatorios con Python\"\ndescription-meta: \"Práctica de pensamiento probabilístico con ejemplos de generación de números aleatorios con Python\"\nauthor: \"Leonardo Hansa\"\ndate: \"2024-10-23\"\ncategories: [exploraciones]\nexecute: \n  echo: true\n  message: false\n  warning: false\nfreeze: true\n---\n\n\n\n\nPara trabajar con números aleatorios en Python parece que la referencia es usar **numpy**.\n\n::: {#librerias .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport matplotlib.pyplot as plt\n```\n:::\n\n\n## numpy básico\n\nVamos a simular muchos lanzamientos de 4 monedas y vamos a ver en qué proporción ocurre que las cuatro monedas muestran cara. O sea, lanzo 4 monedas y apunto si todas han salido cara; las lanzo otra vez y vuelvo a apuntar; las lanzo otra vez y vuelvo a apuntar; y así 10.000 veces.\n\n::: {#cell-generacion-lanzamientos-monedas .cell execution_count=2}\n``` {.python .cell-code}\ntotal_runs = 10000\nn_all_heads = 0\n\nfor _ in range(total_runs):\n    heads = np.random.random(size=4)\n    # Si <0.5, cara; si no, cruz\n    heads = heads < 0.5\n    n_heads = heads.sum()\n    if n_heads == 4:\n        n_all_heads += 1\n\nn_all_heads / total_runs\n```\n\n::: {#generacion-lanzamientos-monedas .cell-output .cell-output-display execution_count=2}\n```\n0.0629\n```\n:::\n:::\n\n\n## Algo de visualización\n\nEn una moneda la probabilidad de obtener cara es 0.5, pero puedes tener una moneda trucada con una probabilidad diferente (¿puedes?).\n\nVamos a ver cómo se distribuye el obtener cara en distintos casos. El ejemplo ahora consiste en lanzar una moneda 100 veces, y en esas 100 veces veo cuántas caras he obtenido. Así veré cómo de esperable es obtener muy pocas caras o muchas caras, en función de cuán trucada esté la moneda.\n\n::: {#function-lanzamientos .cell execution_count=3}\n``` {.python .cell-code}\ndef visualizacion_experimentos(probabilidad, lanzamientos, total_experimentos):\n    caras_obtenidas = np.empty(total_experimentos)\n\n    for i in range(total_experimentos):\n        caras_obtenidas[i] = np.sum(np.random.random(lanzamientos) < probabilidad)\n    \n    plt.hist(caras_obtenidas)\n    plt.xlabel('Caras obtenidas')\n    plt.ylabel('Conteo')\n    plt.title(f'Lanzamientos por experimento: {lanzamientos}. Probabilidad: {probabilidad}')\n    plt.show()\n```\n:::\n\n\nEn `caras_obtenidas` tenemos guardado el número de caras que hemos obtenido en cada experimento (cada uno consiste en 100 lanzamientos de una moneda cuya probabilidad de cara es 0.5).\n\n::: {#cell-experimento0.5 .cell execution_count=4}\n``` {.python .cell-code}\nvisualizacion_experimentos(0.5, 100, 10000)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/experimento0.5-output-1.png){#experimento0.5 width=602 height=449}\n:::\n:::\n\n\nLo que más peso tiene está en torno a 50 caras (frente a 100 totales). Es raro bajar de 40 o superar 60. Y parece imposible bajar de 30 o superar 70. \n\nVamos a cambiar la probabilidad:\n\n::: {#cell-experimento0.1 .cell execution_count=5}\n``` {.python .cell-code}\nvisualizacion_experimentos(0.1, 100, 10000)\n```\n\n::: {.cell-output .cell-output-display}\n![](index_files/figure-html/experimento0.1-output-1.png){#experimento0.1 width=602 height=449}\n:::\n:::\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}