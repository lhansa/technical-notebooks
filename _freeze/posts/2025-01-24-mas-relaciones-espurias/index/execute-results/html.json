{
  "hash": "0bb754e246c98c9c03515e5c1e0a874e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Otro experimento con relaciones espurias\"\ndescription: \"Ejercicio con variables espurias y regresión\"\ndescription-meta: \"Ejercicio con variables espurias y regresión\"\nauthor: \"Leonardo Hansa\"\ndate: \"2025-01-24\"\ncategories: [datos]\nexecute: \n  echo: true\n  message: false\n  warning: false\nfreeze: true\n---\n\n\n\n## Datos y planteamiento\n\nTienes una variable $x_{real}$ que genera dos variables: $y$ y $x_{spur}$. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rethinking)\nlibrary(ggplot2)\n\nn_data <- 100\nx_real <- rnorm(n_data)\nx_spur <- rnorm(n_data, x_real)\ny  <- rnorm(n_data, x_real)\n\ndf <- data.frame(y, x_real, x_spur)\n\nggplot(df) + \n  geom_histogram(aes(x_spur), fill = \"#800080\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/libs-and-data-1.png){width=672}\n:::\n:::\n\n\n\nComo la relación entre $x_{real}$ y $x_{spur}$ es alta, $x_{spur}$ parece tener una relación con $y$.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(df) + \n  geom_point(aes(x_spur, y)) + \n  geom_smooth(aes(x_spur, y), method = \"lm\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/plot-1.png){width=672}\n:::\n:::\n\n\n\nPero $y$ por definición depende únicamente de $x_{real}$, por lo que la relación entre $x_{spur}$ y $y$ es espuria.\n\n## Regresiones\n\nLa regresión que se ajusta según la definición sería:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_real <- quap(\n  alist(\n    y ~ dnorm(mu, sigma), \n    mu <- a + b * x_real, \n    a ~ dnorm(0, 0.2), \n    b ~ dnorm(0, 0.5),\n    sigma ~ dexp(1)\n  ), \n  data = df\n)\n\nprecis(fit_real)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           mean         sd        5.5%     94.5%\na     0.1200136 0.08733753 -0.01956863 0.2595958\nb     1.0571869 0.09017250  0.91307384 1.2013000\nsigma 0.9596754 0.06750045  0.85179669 1.0675542\n```\n\n\n:::\n:::\n\n\n\nSi intentas ajustar una regresión que incluya a la variable espuria, el modelo te la rechazará.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit <- quap(\n    alist(\n        y ~ dnorm(mu, sigma), \n        mu <- a + b_spur * x_spur + b_real * x_real, \n        a ~ dnorm(0, 0.2),\n        b_spur ~ dnorm(0, 0.5),\n        b_real ~ dnorm(0, 0.5),\n        sigma ~ dexp(1)\n    ), \n    data = df\n)\n\nprecis(fit)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n              mean         sd        5.5%     94.5%\na       0.11982176 0.08719034 -0.01952525 0.2591688\nb_spur -0.03306708 0.09448089 -0.18406579 0.1179316\nb_real  1.09219751 0.13449093  0.87725503 1.3071400\nsigma   0.95766044 0.06749719  0.84978689 1.0655340\n```\n\n\n:::\n:::\n\n\n\nSi no quieres hacerlo bayesiano:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_lm <- lm(y ~ x_spur + x_real, data = df)\nsummary(fit_lm)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = y ~ x_spur + x_real, data = df)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-2.26639 -0.58538 -0.03526  0.66746  2.29240 \n\nCoefficients:\n            Estimate Std. Error t value Pr(>|t|)    \n(Intercept)  0.14138    0.09862   1.434    0.155    \nx_spur      -0.07976    0.09989  -0.798    0.427    \nx_real       1.17575    0.14336   8.201    1e-12 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.9749 on 97 degrees of freedom\nMultiple R-squared:  0.5856,\tAdjusted R-squared:  0.577 \nF-statistic: 68.53 on 2 and 97 DF,  p-value: < 2.2e-16\n```\n\n\n:::\n:::\n\n\n\nOtra opción sería que sí usaras la variable espuria pero no la real:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_spur <- quap(\n  alist(\n    y ~ dnorm(mu, sigma), \n    mu <- a + b * x_spur, \n    a ~ dnorm(0, 0.2),\n    b ~ dnorm(0, 0.5),\n    sigma ~ dexp(1)\n  ), \n  data = df\n)\n\nprecis(fit_spur)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           mean         sd        5.5%     94.5%\na     0.1670335 0.10619925 -0.00269343 0.3367604\nb     0.5325380 0.08162221  0.40208999 0.6629861\nsigma 1.2435069 0.08730279  1.10398016 1.3830336\n```\n\n\n:::\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}