{
  "hash": "dda8fc2a621e600cb12765f081d8a49e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Experimento bayesiano con multicolinealidad\"\ndescription: \"Regresión lineal bayesiana con multicolinealidad\"\ndescription-meta: \"Regresión lineal bayesiana con multicolinealidad\"\nauthor: \"Leonardo Hansa\"\ndate: \"2025-01-26\"\ncategories: [datos]\nexecute: \n  echo: true\n  message: false\n  warning: false\nfreeze: true\ndraft: true\n---\n\n\n\nEl [otro día mostraba](https://lhansa.github.io/posts/2025-01-16-autocolinealidad/) cómo la multicolinealidad puede no suponerte mucho problema en algunos casos. \n\nAhora lo planteo de otra forma. \n\nGenero unos datos parecidos.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rethinking)\n\nset.seed(123)\n\nn_size <- 10000\nx1 <- rnorm(n_size, 50, 10)\nx2  <-  0.5 * x1 + rnorm(n_size, 0, 5)\ny  <-  2 + 3 * x1 + 4 * x2 + rnorm(n_size, 0, 10)\n\nfit_10000 <- quap(\n    alist(\n        y ~ dnorm(mu, sigma), \n        mu <- a + b1 * x1 + b2 * x2, \n        a ~ dnorm(2, 0.5),\n        b1 ~ dnorm(0, 0.5),\n        b2 ~ dnorm(0, 0.5),\n        sigma ~ dexp(1)\n    ), \n    data = list(y = y, x1 = x1, x2 = x2)\n)\n\nprecis(fit_10000)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          mean         sd      5.5%     94.5%\na     1.503262 0.35711412 0.9325245  2.073999\nb1    3.013984 0.01228435 2.9943512  3.033617\nb2    3.989847 0.01994538 3.9579701  4.021723\nsigma 9.997712 0.07064636 9.8848050 10.110618\n```\n\n\n:::\n:::\n\n\n\n\nCon el intercept le tengo que ayudar bastante porque es muy sensible al priori. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn_size <- 100\nx1 <- rnorm(n_size, 50, 10)\nx2  <-  0.5 * x1 + rnorm(n_size, 0, 5)\ny  <-  2 + 3 * x1 + 4 * x2 + rnorm(n_size, 0, 10)\n\nfit_100 <- quap(\n    alist(\n        y ~ dnorm(mu, sigma), \n        mu <- a + b1 * x1 + b2 * x2, \n        a ~ dnorm(2, 0.5),\n        b1 ~ dnorm(0, 0.5),\n        b2 ~ dnorm(0, 0.5),\n        sigma ~ dexp(1)\n    ), \n    data = list(y = y, x1 = x1, x2 = x2)\n)\n\nprecis(fit_100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          mean         sd     5.5%    94.5%\na     2.079943 0.49551723 1.288011 2.871875\nb1    3.114972 0.08410183 2.980561 3.249383\nb2    3.707199 0.16144912 3.449172 3.965226\nsigma 7.462978 0.50892721 6.649614 8.276342\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nprecis(fit_10000)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          mean         sd      5.5%     94.5%\na     1.503262 0.35711412 0.9325245  2.073999\nb1    3.013984 0.01228435 2.9943512  3.033617\nb2    3.989847 0.01994538 3.9579701  4.021723\nsigma 9.997712 0.07064636 9.8848050 10.110618\n```\n\n\n:::\n\n```{.r .cell-code}\nprecis(fit_100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n          mean         sd     5.5%    94.5%\na     2.079943 0.49551723 1.288011 2.871875\nb1    3.114972 0.08410183 2.980561 3.249383\nb2    3.707199 0.16144912 3.449172 3.965226\nsigma 7.462978 0.50892721 6.649614 8.276342\n```\n\n\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}