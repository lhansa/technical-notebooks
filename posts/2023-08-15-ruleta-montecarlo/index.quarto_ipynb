{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Cómo jugar a la ruleta sin perder dinero\"\n",
        "description: \"Simulación de experimentos del juego de la ruleta en un casino\"\n",
        "description-meta: \"Simulación de juegos con la ruleta de un casino. Montecarlo\"\n",
        "author: \"Leonardo Hansa\"\n",
        "date: \"2023-08-15\"\n",
        "categories: [datos]\n",
        "execute: \n",
        "  echo: false\n",
        "freeze: auto\n",
        "draft: true\n",
        "---"
      ],
      "id": "d099abb8"
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: libs\n",
        "import random\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd"
      ],
      "id": "libs",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: roulette-functions\n",
        "def get_color_for_number(num):\n",
        "    if num == 0 or num == 37:  # En nuestra representación, 37 será el 00\n",
        "        return 'green'\n",
        "    if ((1 <= num <= 10) or (19 <= num <= 28)):\n",
        "        return 'red' if num % 2 == 1 else 'black'\n",
        "    else:\n",
        "        return 'black' if num % 2 == 1 else 'red'\n",
        "\n",
        "\n",
        "def spin_roulette(roulette_dict):\n",
        "    number = random.choice(list(roulette_dict.keys()))\n",
        "    return number, roulette_dict[number]"
      ],
      "id": "roulette-functions",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: simulate-function\n",
        "def simulate_spins(bet_amount, max_amount, bet_color, roulette):\n",
        "    \"\"\"\n",
        "    Simulate a sequence of spins in a roulette game using a betting strategy.\n",
        "    \n",
        "    Parameters:\n",
        "    - bet_amount: The initial amount to bet.\n",
        "    - max_amount: Maximum amount to be spent before stopping.\n",
        "    - bet_color: The color to bet on (e.g., 'red' or 'black').\n",
        "    - roulette: The roulette representation, as a dict of {number: color}.\n",
        "\n",
        "    Returns:\n",
        "    A dictionary with:\n",
        "    - bet: Number of bets made.\n",
        "    - spent: Total amount spent.\n",
        "    - returned: Total amount returned if won, otherwise 0.\n",
        "    \"\"\"\n",
        "    \n",
        "    total_spent = bet_amount\n",
        "    current_bet = bet_amount\n",
        "\n",
        "    for i in range(1000):  # number of iterations limited to 1000 for now\n",
        "        number, color = spin_roulette(roulette)\n",
        "\n",
        "        if color == bet_color:\n",
        "            return {\n",
        "                'bet': i + 1,\n",
        "                'spent': total_spent,\n",
        "                'returned': current_bet * 2, \n",
        "                'profit': current_bet * 2 - total_spent\n",
        "            }\n",
        "\n",
        "        # Check if the next bet would exceed the max_amount\n",
        "        if (total_spent + current_bet * 2) > max_amount:\n",
        "          return {\n",
        "                'bet': i + 1,\n",
        "                'spent': total_spent,\n",
        "                'returned': 0, \n",
        "                'profit': 0 - total_spent\n",
        "          }\n",
        "            \n",
        "        current_bet *= 2\n",
        "        total_spent += current_bet\n",
        "        \n",
        "        \n",
        "    return {\n",
        "        'bet': i + 1,\n",
        "        'spent': total_spent - current_bet,\n",
        "        'returned': 0, \n",
        "        'profit': 0 - (total_spent - current_bet)\n",
        "    }\n",
        "    \n",
        "    \n",
        "def run_simulations(k, bet_amount, max_amount, bet_color, roulette):\n",
        "    \"\"\"\n",
        "    Execute simulate_spins k times and collect the results.\n",
        "\n",
        "    Returns:\n",
        "    A list of dictionaries with the results of each simulation.\n",
        "    \"\"\"\n",
        "    results = []\n",
        "    for _ in range(k):\n",
        "        result = simulate_spins(bet_amount, max_amount, bet_color, roulette)\n",
        "        results.append(result)\n",
        "    return results"
      ],
      "id": "simulate-function",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: results\n",
        "def plot_histogram(results):\n",
        "    \"\"\"\n",
        "    Plot a histogram of the 'returned' values from the simulation results.\n",
        "    \"\"\"\n",
        "    # Extract 'returned' values from the results\n",
        "    returned_values = [res['profit'] for res in results]\n",
        "\n",
        "    # Create a histogram\n",
        "    plt.hist(returned_values, bins=30, edgecolor='black', alpha=0.7)\n",
        "    plt.title('Distribution of Returned Values')\n",
        "    plt.xlabel('Returned Value')\n",
        "    plt.ylabel('Number of Occurrences')\n",
        "    plt.show()\n",
        "    \n",
        "def frequency_table(results):\n",
        "    \"\"\"\n",
        "    Create a frequency table from the 'returned' values in the simulation results.\n",
        "\n",
        "    Returns:\n",
        "    A DataFrame showing the unique returned values and their frequencies.\n",
        "    \"\"\"\n",
        "    \n",
        "    # Extract 'returned' values from the results\n",
        "    returned_values = [res['profit'] for res in results]\n",
        "    \n",
        "    # Create a DataFrame from the returned values\n",
        "    df = pd.DataFrame(returned_values, columns=['Returned Value'])\n",
        "\n",
        "    # Compute the frequency table\n",
        "    freq_table = df['Returned Value'].value_counts().reset_index()\n",
        "    freq_table.columns = ['Returned Value', 'Frequency']\n",
        "    \n",
        "    # Sort by 'Returned Value'\n",
        "    freq_table = freq_table.sort_values(by='Returned Value').reset_index(drop=True)\n",
        "\n",
        "    return freq_table"
      ],
      "id": "results",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: simulation-1000\n",
        "\n",
        "# Define the roulette\n",
        "roulette = {i if i != 37 else '00': get_color_for_number(i) for i in range(38)}\n",
        "\n",
        "# Number of simulations\n",
        "k = 1000\n",
        "\n",
        "# Execute simulations\n",
        "results = run_simulations(k, 10, 1000, 'red', roulette)\n",
        "\n",
        "# Plot the histogram\n",
        "plot_histogram(results)"
      ],
      "id": "simulation-1000",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {},
      "source": [
        "#| label: simulation-Inf\n",
        "\n",
        "# Number of simulations\n",
        "k = 1000\n",
        "\n",
        "# Execute simulations\n",
        "results = run_simulations(k, 10, float('inf'), 'red', roulette)\n",
        "\n",
        "# Plot the histogram\n",
        "frequency_table(results)"
      ],
      "id": "simulation-Inf",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\Users\\Leonardo.Hansa\\AppData\\Roaming\\Python\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}