---
title: "Juego probabilístico con números aleatorios"
description: "Práctica de pensamiento probabilístico con ejemplos de generación de números aleatorios con Python"
description-meta: "Práctica de pensamiento probabilístico con ejemplos de generación de números aleatorios con Python"
author: "Leonardo Hansa"
date: "2024-10-23"
categories: [exploraciones]
execute: 
  echo: true
  message: false
  warning: false
freeze: true
---

Para trabajar con números aleatorios en Python parece que la referencia es usar **numpy**.
```{python}
#| label: librerias
import numpy as np
import matplotlib.pyplot as plt
```

## numpy básico

Vamos a simular muchos lanzamientos de 4 monedas y vamos a ver en qué proporción ocurre que las cuatro monedas muestran cara. O sea, lanzo 4 monedas y apunto si todas han salido cara; las lanzo otra vez y vuelvo a apuntar; las lanzo otra vez y vuelvo a apuntar; y así 10.000 veces.

```{python}
#| label: generacion-lanzamientos-monedas
total_runs = 10000
n_all_heads = 0

for _ in range(total_runs):
    heads = np.random.random(size=4)
    # Si <0.5, cara; si no, cruz
    heads = heads < 0.5
    n_heads = heads.sum()
    if n_heads == 4:
        n_all_heads += 1

n_all_heads / total_runs
```

## Algo de visualización

En una moneda la probabilidad de obtener cara es 0.5, pero puedes tener una moneda trucada con una probabilidad diferente (¿puedes?).

Vamos a ver cómo se distribuye el obtener cara en distintos casos. El ejemplo ahora consiste en lanzar una moneda 100 veces, y en esas 100 veces veo cuántas caras he obtenido. Así veré cómo de esperable es obtener muy pocas caras o muchas caras, en función de cuán trucada esté la moneda.

```{python}
#| label: function-lanzamientos
def visualizacion_experimentos(probabilidad, lanzamientos, total_experimentos):
    caras_obtenidas = np.empty(total_experimentos)

    for i in range(total_experimentos):
        caras_obtenidas[i] = np.sum(np.random.random(lanzamientos) < probabilidad)
    
    plt.hist(caras_obtenidas)
    plt.xlabel('Caras obtenidas')
    plt.ylabel('Conteo')
    plt.title(f'Lanzamientos por experimento: {lanzamientos}. Probabilidad: {probabilidad}')
    plt.show()
```

En `caras_obtenidas` tenemos guardado el número de caras que hemos obtenido en cada experimento (cada uno consiste en 100 lanzamientos de una moneda cuya probabilidad de cara es 0.5).

```{python}
#| label: experimento0.5
visualizacion_experimentos(0.5, 100, 10000)
```

Lo que más peso tiene está en torno a 50 caras (frente a 100 totales). Es raro bajar de 40 o superar 60. Y parece imposible bajar de 30 o superar 70. 

Vamos a cambiar la probabilidad:

```{python}
#| label: experimento0.1
visualizacion_experimentos(0.1, 100, 10000)
```
